{"version":3,"sources":["Components/AllInOneChart.tsx","Components/CountryAllChart.tsx","App.tsx","serviceWorker.ts","index.tsx","loading.svg"],"names":["AllInOneChart","props","defaultDataset","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","activeData","labels","datasets","Object","assign","confirmedData","recoveredData","deathsData","options","maintainAspectRatio","CountryAllChart","country","summary","confirmed","recovered","deaths","active","firstContactDate","className","key","keys","values","sortCountriesBy","byCountrySummary","order","sort","c1","c2","sortOrder","v1","v2","undefined","addActiveDataToCountry","destination","countries","i","length","countryRow","dates","j","date","addDataToCountry","dataInput","row","filter","k","match","forEach","reformattedDate","moment","format","parseInt","getCountrySummary","byCountry","confKeys","confVals","reverse","find","v","findIndex","n","getCsvData","url","a","fetchCsv","csvData","Papa","parse","header","fetch","then","response","body","reader","getReader","decoder","TextDecoder","read","result","decode","value","App","useState","isLoaded","setLoaded","isLoading","setLoading","setByCountry","countriesSorted","setCountriesSorted","setByCountrySummary","orderBy","setOrderBy","orderDir","setOrderDir","lastOrderBy","setLastOrderBy","lastOrderDir","setLastOrderDir","console","log","Promise","all","countriesByConfirmed","href","Select","id","onChange","event","child","target","MenuItem","map","src","loading","alt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.77790ecb.chunk.js","sourcesContent":["import * as chartjs from 'chart.js';\nimport React from 'react';\nimport { ChartData, Line } from 'react-chartjs-2';\n\ninterface IAllInOneChartProps {\n  labels: string[],\n  activeData: number[],\n  confirmedData: number[],\n  recoveredData: number[],\n  deathsData: number[],\n}\n\nexport const AllInOneChart = (props: IAllInOneChartProps) => {\n\n  const defaultDataset = {\n    label: 'Active',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(192,92,41,0.4)',\n    borderColor: 'rgb(192,92,41)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(192,92,41,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(192,92,41,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: props.activeData,\n  };\n\n  const data: ChartData<chartjs.ChartData> = {\n    labels: props.labels,\n    datasets: [\n      Object.assign({}, defaultDataset,\n        {\n          label: 'Confirmed',\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgb(99,255,255)',\n          pointBackgroundColor: 'rgb(99,255,255)',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          data: props.confirmedData,\n        }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Active',\n        backgroundColor: 'rgba(192,92,41,0.4)',\n        borderColor: 'rgb(255,122,54)',\n        pointBackgroundColor: 'rgb(255,122,54)',\n        pointBorderColor: 'rgba(192,92,41,1)',\n        pointHoverBackgroundColor: 'rgba(192,92,41,1)',\n        data: props.activeData,\n      }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Recovered',\n        backgroundColor: 'rgba(113,192,56,0.4)',\n        borderColor: 'rgb(113,192,56)',\n        pointBorderColor: 'rgb(113,192,56)',\n        pointBackgroundColor: 'rgb(167,255,65)',\n        pointHoverBackgroundColor: 'rgb(113,192,56)',\n        data: props.recoveredData,\n      }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Deaths',\n        backgroundColor: 'rgba(188,192,187,0.4)',\n        borderColor: 'rgb(188,192,187)',\n        pointBorderColor: 'rgb(188,192,187)',\n        pointBackgroundColor: 'rgb(251,255,249)',\n        pointHoverBackgroundColor: 'rgb(188,192,187)',\n        data: props.deathsData,\n      })\n    ]\n  };\n\n  return (\n    <Line\n      data={data}\n      options={{ maintainAspectRatio: true }}\n    />\n  );\n};\n","import React from 'react';\nimport { IByCountryRow, IByCountrySummaryRow } from '../types';\nimport { AllInOneChart } from './AllInOneChart';\n\ninterface ICountryAllChartProps {\n  country: string,\n  summary: IByCountrySummaryRow,\n  data: IByCountryRow,\n}\n\nexport const CountryAllChart = (props: ICountryAllChartProps) => {\n  const { country, summary, data } = props;\n\n  const confirmed = `${summary?.confirmed}` || '-';\n  const recovered = `${summary?.recovered}` || '-';\n  const deaths = `${summary?.deaths}` || '-';\n  const active = `${summary?.active}` || '-';\n  const firstContactDate = `${summary?.firstContactDate}` || '-';\n\n  return (\n    <div className=\"col-12 col-lg-6\" key={country}>\n      <div className=\"chartBox\">\n        <h4>{country} <span className=\"active\">{active}</span> <span className=\"confirmed\">{confirmed}</span> <span\n          className=\"recovered\">{recovered}</span> <span className=\"deaths\">{deaths}</span></h4>\n        <p><small>First contact: {firstContactDate}</small></p>\n        <AllInOneChart\n          labels={Object.keys(data.confirmed)}\n          confirmedData={Object.values(data.confirmed)}\n          recoveredData={Object.values(data.recovered)}\n          deathsData={Object.values(data.deaths)}\n          activeData={Object.values(data.active)}\n        />\n      </div>\n    </div>\n  );\n};\n","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport moment from 'moment';\nimport Papa from 'papaparse';\nimport React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { CountryAllChart } from './Components/CountryAllChart';\nimport loading from './loading.svg';\nimport { Dictionary, TByCountry, TByCountryRowKey, TByCountrySummary, TByCountrySummaryKey } from './types';\n\nfunction App() {\n\n  const confirmedUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv';\n  const deathsUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv';\n  const recoveredUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv';\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [byCountry, setByCountry] = useState({} as TByCountry);\n  const [countriesSorted, setCountriesSorted] = useState([] as string[]);\n  const [byCountrySummary, setByCountrySummary] = useState({} as TByCountrySummary);\n  const [orderBy, setOrderBy] = useState('confirmed' as TByCountrySummaryKey);\n  const [orderDir, setOrderDir] = useState('desc' as 'desc' | 'asc');\n  const [lastOrderBy, setLastOrderBy] = useState('' as TByCountrySummaryKey);\n  const [lastOrderDir, setLastOrderDir] = useState('' as 'desc' | 'asc');\n\n  if (!isLoading) {\n    if (!isLoaded) {\n      setLoading(true);\n      Promise.all([getCsvData(confirmedUrl), getCsvData(recoveredUrl), getCsvData(deathsUrl)]).then(([confirmed, recovered, deaths]) => {\n        const byCountry: TByCountry = {};\n        addDataToCountry(byCountry, confirmed.data, 'confirmed');\n        addDataToCountry(byCountry, recovered.data, 'recovered');\n        addDataToCountry(byCountry, deaths.data, 'deaths');\n        addActiveDataToCountry(byCountry);\n        console.log('byCountry', byCountry);\n        const byCountrySummary: TByCountrySummary = getCountrySummary(byCountry);\n        console.log('byCountrySummary', byCountrySummary);\n        const countriesByConfirmed: string[] = sortCountriesBy(byCountrySummary, orderBy, orderDir);\n        setLastOrderBy(orderBy);\n        setLastOrderDir(orderDir);\n        setByCountry(byCountry);\n        setByCountrySummary(byCountrySummary);\n        setCountriesSorted(countriesByConfirmed);\n        setLoaded(true);\n        setLoading(false);\n      });\n\n    } else if(lastOrderBy !== orderBy || lastOrderDir !== orderDir) {\n      setLoading(true);\n      const countriesSorted: string[] = sortCountriesBy(byCountrySummary, orderBy, orderDir);\n      setLastOrderBy(orderBy);\n      setLastOrderDir(orderDir);\n      console.log('countriesSorted', countriesSorted);\n      setCountriesSorted(countriesSorted);\n      setLoading(false);\n    }\n  }\n\n  const handleOrderBySelect = (event: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode,) => {\n    console.log('handleOrderBySelect val', event.target.value);\n    // @ts-ignore\n    setOrderBy(event.target.value);\n  };\n\n  const handleOrderDirSelect = (event: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode,) => {\n    console.log('handleOrderDirSelect val', event.target.value);\n    // @ts-ignore\n    setOrderDir(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n\n        <header className=\"header\">\n          <h1>Coronavirus COVID-19 Statistic Charts</h1>\n          <p><small>(data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a>)</small></p>\n        </header>\n\n        {countriesSorted.length > 0 &&\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-end\">\n\n              <div className=\"mr-4\">Order by:</div>\n              <Select id=\"orderBy\" value={orderBy} onChange={handleOrderBySelect} className=\"mr-2\">\n                <MenuItem value=\"confirmed\">confirmed</MenuItem>\n                <MenuItem value=\"active\">active</MenuItem>\n                <MenuItem value=\"recovered\">recovered</MenuItem>\n                <MenuItem value=\"deaths\">deaths</MenuItem>\n                <MenuItem value=\"firstContactDate\">first contact date</MenuItem>\n              </Select>\n\n              <Select id=\"orderDir\" value={orderDir} onChange={handleOrderDirSelect}>\n                <MenuItem value=\"desc\">desc</MenuItem>\n                <MenuItem value=\"asc\">asc</MenuItem>\n              </Select>\n\n            </div>\n          </div>\n          <div className=\"row\">\n            {countriesSorted.map((country, i) => (\n              <CountryAllChart\n                country={country}\n                summary={byCountrySummary[country]}\n                data={byCountry[country]}\n                key={country}\n              ></CountryAllChart>\n            ))}\n          </div>\n        </div>\n        }\n\n        {countriesSorted.length === 0 &&\n        <img src={loading} className=\"App-logo\" alt=\"loading\" />\n        }\n\n        <footer>\n          <p><small>Source code available at: <a href=\"https://github.com/covid19stats/covid19stats.github.io\">https://github.com/covid19stats/covid19stats.github.io</a>.</small></p>\n          <p><small>Suggestions and Pull Requests are very welcome.</small></p>\n        </footer>\n\n      </div>\n    </div>\n  );\n}\n\nconst sortCountriesBy = (byCountrySummary: TByCountrySummary, key: TByCountrySummaryKey, order: 'desc' | 'asc' = 'desc') => Object.keys(byCountrySummary).sort((c1: string, c2: string) => {\n  let sortOrder = order;\n  const v1 = byCountrySummary[c1][key];\n  const v2 = byCountrySummary[c2][key];\n  if (key === 'firstContactDate') {\n    // reorder for dates\n    sortOrder = (order === 'desc') ? 'asc' : 'desc';\n  }\n  if (sortOrder === 'desc') {\n    // console.log('sortCountriesBy ', c1, v1, v2, v1 === v2 ? 0 : v1 < v2 ? 1 : -1);\n    if (v1 === undefined) return -1;\n    if (v2 === undefined) return 1;\n    return v1 === v2 ? 0 : v1 < v2 ? 1 : -1;\n  }\n  // console.log('sortCountriesBy ', c1, v1, v2, v1 === v2 ? 0 : v1 > v2 ? 1 : -1);\n  if (v1 === undefined) return 1;\n  if (v2 === undefined) return -1;\n  return v1 === v2 ? 0 : v1 > v2 ? 1 : -1;\n});\n\nconst addActiveDataToCountry = (destination: TByCountry) => {\n  const countries = Object.keys(destination);\n  for (let i = 0; i < countries.length; i += 1) {\n    const country = countries[i];\n    const countryRow = destination[country];\n    const dates = Object.keys(countryRow.confirmed);\n    for (let j = 0; j < dates.length; j += 1) {\n      const date = dates[j];\n      countryRow.active[date] = countryRow.confirmed[date] - countryRow.recovered[date] - countryRow.deaths[date];\n    }\n  }\n};\n\nconst addDataToCountry = (destination: TByCountry, dataInput: Dictionary<string>[], key: TByCountryRowKey) => {\n  for (let i = 0; i < dataInput.length; i += 1) {\n    const row = dataInput[i];\n    const country = row['Country/Region'];\n    if (country) {\n      if (!destination[country]) {\n        destination[country] = {\n          confirmed: {},\n          recovered: {},\n          deaths: {},\n          active: {},\n        };\n      }\n\n      const dateKeys = Object.keys(row).filter(k => k.match(/[0-9/]{6,}/));\n      dateKeys.forEach(date => {\n        const reformattedDate = moment(date, 'M/D/YY').format('YYYY-MM-DD');\n        destination[country][key][reformattedDate] = parseInt(row[date]) + (destination[country][key][reformattedDate] | 0);\n      });\n    }\n  }\n};\n\nconst getCountrySummary = (byCountry: TByCountry): TByCountrySummary => {\n  const byCountrySummary: TByCountrySummary = {};\n  Object.keys(byCountry).forEach((country) => {\n    const confKeys = Object.keys(byCountry[country].confirmed);\n    const confVals = Object.values(byCountry[country].confirmed);\n\n    const confVals2 = Object.values(byCountry[country].confirmed);\n    let reversedConfVals = confVals2.reverse();\n    const confirmed = reversedConfVals.find(v => v > 0) || 0;\n\n    const recVals = Object.values(byCountry[country].recovered);\n    let reversedRecVals = recVals.reverse();\n    const recovered = reversedRecVals.find(v => v > 0) || 0;\n\n    const deVals = Object.values(byCountry[country].deaths);\n    let reversedDeVals = deVals.reverse();\n    const deaths = reversedDeVals.find(v => v > 0) || 0;\n\n    const firstContactDate = confKeys[confVals.findIndex(n => n > 0)] || moment().format('YYYY-MM-DD');\n\n    byCountrySummary[country] = {\n      firstContactDate,\n      confirmed,\n      recovered,\n      deaths,\n      active: confirmed - recovered - deaths,\n    };\n  });\n  return byCountrySummary;\n};\n\nasync function getCsvData(url: string) {\n  let csvData = await fetchCsv(url);\n\n  return Papa.parse(csvData, { header: true });\n}\n\nasync function fetchCsv(url: string) {\n  return fetch(url).then(function (response) {\n    if (!response.body) {\n      return '';\n    }\n    let reader = response.body.getReader();\n    let decoder = new TextDecoder('utf-8');\n\n    return reader.read().then(function (result) {\n      return decoder.decode(result.value);\n    });\n  });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.92a6a27b.svg\";"],"sourceRoot":""}